# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import api2_pb2 as api2__pb2


class API2Stub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.bidirectionalStream = channel.stream_stream(
                '/api2.API2/bidirectionalStream',
                request_serializer=api2__pb2.Request.SerializeToString,
                response_deserializer=api2__pb2.Response.FromString,
                )
        self.pushStream = channel.stream_stream(
                '/api2.API2/pushStream',
                request_serializer=api2__pb2.PushRequest.SerializeToString,
                response_deserializer=api2__pb2.PushResponse.FromString,
                )


class API2Servicer(object):
    """Missing associated documentation comment in .proto file."""

    def bidirectionalStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def pushStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_API2Servicer_to_server(servicer, server):
    rpc_method_handlers = {
            'bidirectionalStream': grpc.stream_stream_rpc_method_handler(
                    servicer.bidirectionalStream,
                    request_deserializer=api2__pb2.Request.FromString,
                    response_serializer=api2__pb2.Response.SerializeToString,
            ),
            'pushStream': grpc.stream_stream_rpc_method_handler(
                    servicer.pushStream,
                    request_deserializer=api2__pb2.PushRequest.FromString,
                    response_serializer=api2__pb2.PushResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'api2.API2', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class API2(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def bidirectionalStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/api2.API2/bidirectionalStream',
            api2__pb2.Request.SerializeToString,
            api2__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def pushStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/api2.API2/pushStream',
            api2__pb2.PushRequest.SerializeToString,
            api2__pb2.PushResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
